

■Flightはコンポーネントベースのjsフロントエンド

■コンポーネントとはなんぞや
・A Component is nothing more than a constructor with properties mixed into its prototype.
	コンポーネントとは、プロトタイプにmixinするプロパティのコンストラクタにほかなりません。

・Every Component comes with a set of basic functionality such as event handling and component registration.
	全てのコンポーネントはイベントハンドリングやコンポーネントの登録などの基本的は関数のセットが付属しています。

・Additionally, each Component definition mixes in a set of custom properties which describe its behavior.
	更に、それぞれのコンポーネント定義はその動作を示すカスタムプロパティが混ざっています。

・When a component is attached to a DOM node, a new instance of that component is created. Each component instance references the DOM node via its node property.
	コンポーネントがDomノードにをアタッチされた時、新しいコンポーネントのインスタンスが生成されます。それぞれのコンポーネントのインスタンスはNodeプロパティを介してDomノードを参照します

・Component instances cannot be referenced directly; they communicate with other components via events.
	コンポーネントインスタンスを直接参照する事は出来ません。イベントを介してコンポーネントとの通信を行います。



■Flightの使い方
1.コンポーネントを定義する
2.コンポーネントをDomツリーにアタッチする

ね、簡単でしょ?

■コンポーネントを定義する

コンポーネント定義はdefineメソッドで行います。
defineはrequirejsで提供されている、commonjs準拠のモジュールを定義する為のメソッド。

define(
	[depenency-js-list],
	function(depenency...){
		//callback
	}
);


flightでは
component/flight/lib/component.jsを読み込んでコンポーネントを作成する
define(
	['component/flight/lib/component'],
	function(defineComponent){
		//callback
		return defineComponent(makeComponent);
		function makeComponent(){

		}
	}
);

defineComponentはcomponent.jsが返すモジュール
そこに作成するコンポーネント定義を渡すとコンポーネントが生成される


■コンポーネントをDomツリーにアタッチする

全てのコンポーネントはattachToというメソッドを持っています。
attachToの第一引数に、コンポーネントをアタッチするDomノードを指定します。
第二引数にはオプションを指定します。

afterメソッドでコンポーネントを初期化しようず

■コンポーネントのオプション

■アタッチしたDOMに触る
node,
$nodeがある

selectメソッドは$nodeの中から指定のセレクタで要素を検索する。


■イベント
コンポーネントと対話するにはイベントを利用します。
コンポーネントは受け取るイベントの登録と、発行が出来ます

trigger

jQuery.Eventsのラッパ
使い方は同じ

■Mixinとは
・Flightでは、mixinはターゲットとなるオブジェクトのプロパティにアサインすり関数だ
・典型的なmixinは1つ以上のコンポーネントに便利な機能のセットを定義する
・mixinは任意の数のコンポーネントに適用する事が出来る
・コンポーネントは任意の数のmixinを適用する事が出来る
・各コンポーネント モジュールへ mixin コアを定義します
・Mixin はミックスインを適用ことができます。

■Mixinの定義
defineに似てるけど、defineComponentを呼ばない
defineのdependenciesに記述する事でmixinが使える。
data,uiを接続するコンポーネントで使う感じでいいと思う


■これによってなにがおいしそう?

・設計するにあたって依存関係、責務をどうするかが難しいかも、でもDRYを良い感じに実現出来るかもしれない。
・UI処理系、データ処理系などを分けて管理出来る。
・イベントでの連携によって疎結合で色々やれる
・実装方法が統一されているのでFlightの学習コスト払った後は楽になると思う
・テスト、レビューが捗る。jsの実装としてどうか、よりコンポーネント単位の設計に注力出来る
・SocketIOと組み合わせて同時参加ゲームが作れるかもしれない

■大変そうな所
・attrやtriggerの関係が複雑になりがち、docsとか関連図だとかが大切になると思う
・動的にappendした要素に対するattachToがちょいめんどい
・アプリケーションのコンテキストに依存したコンポーネントは再利用がむずいのでその辺りの設計が難しそう



